# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interfaceUI03.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import resource2
import model
import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets

# 导入模型部署库
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QTableWidgetItem, QMessageBox, QAbstractItemView
from PyQt5.QtGui import QPixmap
import torch
from torchvision import transforms
from PIL import Image
import os

current_dir = os.path.dirname(os.path.abspath(__file__))
db_path = os.path.join(current_dir, 'crta')

conn = sqlite3.connect(db_path)
cursor = conn.cursor()
print("CUDA available:", torch.cuda.is_available())


class Ui_MainWindow(object):
    # 将计算设备设置为 GPU
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    switch_window = QtCore.pyqtSignal()
    model = torch.load('D:\\crta\\model_pytorch.pth')
    model.eval()
    model = model.to(device)

    def setupUi(self, MainWindow_inter):
        MainWindow_inter.setObjectName("MainWindow_inter")
        MainWindow_inter.resize(1079, 676)
        MainWindow_inter.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        MainWindow_inter.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.centralwidget = QtWidgets.QWidget(MainWindow_inter)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("#frame{\n"
                                 "    background-color: rgb(56, 57, 60);\n"
                                 "    border-radius:30px;\n"
                                 "}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setContentsMargins(0, 0, 0, -1)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setStyleSheet("#frame_2{\n"
                                   "    background-color: rgb(86, 88, 93);\n"
                                   "    border-top-left-radius:30px;\n"
                                   "    border-top-right-radius:30px;\n"
                                   "}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.frame_4 = QtWidgets.QFrame(self.frame_2)
        self.frame_4.setMinimumSize(QtCore.QSize(150, 0))
        self.frame_4.setStyleSheet("QPushButton{\n"
                                   "    border:none;\n"
                                   "}\n"
                                   "QPushButton:hover{\n"
                                   "    padding-bottom:5px;\n"
                                   "}")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_max = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_max.setStyleSheet("color: rgb(255, 255, 255);")
        self.pushButton_max.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/icons/maximize.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_max.setIcon(icon)
        self.pushButton_max.setIconSize(QtCore.QSize(17, 23))
        self.pushButton_max.setObjectName("pushButton_max")
        self.horizontalLayout_2.addWidget(self.pushButton_max)
        self.pushButton_min = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_min.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/icons/minus.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_min.setIcon(icon1)
        self.pushButton_min.setIconSize(QtCore.QSize(17, 23))
        self.pushButton_min.setObjectName("pushButton_min")
        self.horizontalLayout_2.addWidget(self.pushButton_min)
        self.pushButton_close = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_close.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icons/close.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_close.setIcon(icon2)
        self.pushButton_close.setIconSize(QtCore.QSize(23, 23))
        self.pushButton_close.setObjectName("pushButton_close")
        self.horizontalLayout_2.addWidget(self.pushButton_close)
        self.horizontalLayout_3.addWidget(self.frame_4, 0, QtCore.Qt.AlignRight)
        self.verticalLayout.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(10)
        sizePolicy.setHeightForWidth(self.frame_3.sizePolicy().hasHeightForWidth())
        self.frame_3.setSizePolicy(sizePolicy)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.frame_5 = QtWidgets.QFrame(self.frame_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_5.sizePolicy().hasHeightForWidth())
        self.frame_5.setSizePolicy(sizePolicy)
        self.frame_5.setStyleSheet("QPushButton{\n"
                                   "    background-color: rgb(226, 226, 226);\n"
                                   "    border:none;\n"
                                   "    border-radius:7px;\n"
                                   "}\n"
                                   "QPushButton:pressed{\n"
                                   "    padding-left:5px;\n"
                                   "    padding-right:5px;\n"
                                   "}\n"
                                   "#frame_5{\n"
                                   "    background-color: rgb(86, 88, 93);\n"
                                   "}")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_5)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame_7 = QtWidgets.QFrame(self.frame_5)
        self.frame_7.setStyleSheet("QPushButton:hover{\n"
                                   "    padding-bottom:5px;\n"
                                   "}")
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_7)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.pushButton_photo = QtWidgets.QPushButton(self.frame_7)
        self.pushButton_photo.setMinimumSize(QtCore.QSize(60, 20))
        self.pushButton_photo.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_photo.setFont(font)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/icons/image.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_photo.setIcon(icon3)
        self.pushButton_photo.setIconSize(QtCore.QSize(20, 30))
        self.pushButton_photo.setObjectName("pushButton_photo")
        self.verticalLayout_2.addWidget(self.pushButton_photo)
        # 点击pushButton_photo时显示图片上传界面
        self.pushButton_photo.clicked.connect(self.show_page)
        self.pushButton_exchange = QtWidgets.QPushButton(self.frame_7)
        self.pushButton_exchange.setMinimumSize(QtCore.QSize(60, 20))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_exchange.setFont(font)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/icons/dollar.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_exchange.setIcon(icon4)
        self.pushButton_exchange.setIconSize(QtCore.QSize(18, 30))
        self.pushButton_exchange.setObjectName("pushButton_exchange")
        self.verticalLayout_2.addWidget(self.pushButton_exchange)
        # 点击pushButton_exchange时显示兑换界面
        self.pushButton_exchange.clicked.connect(self.show_page_2)
        self.verticalLayout_3.addWidget(self.frame_7, 0, QtCore.Qt.AlignTop)
        self.horizontalLayout_4.addWidget(self.frame_5)
        self.frame_6 = QtWidgets.QFrame(self.frame_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(6)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_6.sizePolicy().hasHeightForWidth())
        self.frame_6.setSizePolicy(sizePolicy)
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_6)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame_6)
        self.stackedWidget.setStyleSheet("background-color: rgba(0, 0, 0, 0);")
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.label = QtWidgets.QLabel(self.page)
        self.label.setGeometry(QtCore.QRect(10, 10, 601, 421))
        self.label.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                 "border:3px solid rgb(0,0,0);")
        self.label.setText('0')
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.page)
        self.label_2.setGeometry(QtCore.QRect(630, 60, 181, 61))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                   "color: rgb(0, 0, 0);\n"
                                   "border:3px solid rgb(0,0,0);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.page)
        self.label_3.setGeometry(QtCore.QRect(640, 20, 151, 31))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_3.setTextFormat(QtCore.Qt.PlainText)
        self.label_3.setObjectName("label_3")
        self.pushButton_local = QtWidgets.QPushButton(self.page)
        self.pushButton_local.setGeometry(QtCore.QRect(650, 140, 131, 61))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_local.setFont(font)
        self.pushButton_local.setStyleSheet("#pushButton_local{\n"
                                            "    background-color: rgb(220, 220, 220);\n"
                                            "    color: rgb(0, 0, 0);\n"
                                            "    border:3px solid rgb(0,0,0);\n"
                                            "    border-radius:8px;\n"
                                            "}\n"
                                            "#pushButton_local:hover{\n"
                                            "    background-color: rgb(255, 255, 255);\n"
                                            "    color: rgb(0, 0, 0);\n"
                                            "}\n"
                                            "#pushButton_local:pressed{\n"
                                            "    padding-top:5px;\n"
                                            "    padding-left:5px;\n"
                                            "\n"
                                            "}\n"
                                            "")
        self.pushButton_local.setObjectName("pushButton_local")
        # 本地上传照片
        self.pushButton_local.clicked.connect(self.load_image)
        self.pushButton_identify = QtWidgets.QPushButton(self.page)
        self.pushButton_identify.setGeometry(QtCore.QRect(650, 220, 131, 61))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_identify.setFont(font)
        self.pushButton_identify.setStyleSheet("#pushButton_identify{\n"
                                               "    background-color: rgb(220, 220, 220);\n"
                                               "    color: rgb(0, 0, 0);\n"
                                               "    border:3px solid rgb(0,0,0);\n"
                                               "    border-radius:8px;\n"
                                               "}\n"
                                               "#pushButton_identify:hover{\n"
                                               "    background-color: rgb(255, 255, 255);\n"
                                               "    color: rgb(0, 0, 0);\n"
                                               "}\n"
                                               "#pushButton_identify:pressed{\n"
                                               "    padding-top:5px;\n"
                                               "    padding-left:5px;\n"
                                               "\n"
                                               "}\n"
                                               "")
        self.pushButton_identify.setObjectName("pushButton_identify")
        # 识别图像
        self.pushButton_identify.clicked.connect(self.identify_image)
        self.pushButton_revise = QtWidgets.QPushButton(self.page)
        self.pushButton_revise.setGeometry(QtCore.QRect(650, 300, 131, 61))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_revise.setFont(font)
        self.pushButton_revise.setStyleSheet("#pushButton_revise{\n"
                                             "    background-color: rgb(220, 220, 220);\n"
                                             "    color: rgb(0, 0, 0);\n"
                                             "    border:3px solid rgb(0,0,0);\n"
                                             "    border-radius:8px;\n"
                                             "}\n"
                                             "#pushButton_revise:hover{\n"
                                             "    background-color: rgb(255, 255, 255);\n"
                                             "    color: rgb(0, 0, 0);\n"
                                             "}\n"
                                             "#pushButton_revise:pressed{\n"
                                             "    padding-top:5px;\n"
                                             "    padding-left:5px;\n"
                                             "}\n"
                                             "")
        self.pushButton_revise.setObjectName("pushButton_revise")
        # 将 pushButton_revise 的点击事件连接到上述定义的槽函数
        self.pushButton_revise.clicked.connect(self.on_pushButton_revise_clicked)
        self.pushButton_confirm = QtWidgets.QPushButton(self.page)
        self.pushButton_confirm.setGeometry(QtCore.QRect(650, 380, 131, 61))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_confirm.setFont(font)
        self.pushButton_confirm.setStyleSheet("#pushButton_confirm{\n"
                                              "    background-color: rgb(220, 220, 220);\n"
                                              "    color: rgb(0, 0, 0);\n"
                                              "    border:3px solid rgb(0,0,0);\n"
                                              "    border-radius:8px;\n"
                                              "}\n"
                                              "#pushButton_confirm:hover{\n"
                                              "    background-color: rgb(255, 255, 255);\n"
                                              "    color: rgb(0, 0, 0);\n"
                                              "}\n"
                                              "#pushButton_confirm:pressed{\n"
                                              "    padding-top:5px;\n"
                                              "    padding-left:5px;\n"
                                              "\n"
                                              "}\n"
                                              "")
        self.pushButton_confirm.setObjectName("pushButton_confirm")
        self.pushButton_confirm.clicked.connect(self.confirm)
        self.label_4 = QtWidgets.QLabel(self.page)
        self.label_4.setGeometry(QtCore.QRect(10, 440, 111, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.page)
        self.label_5.setGeometry(QtCore.QRect(300, 440, 111, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.page)
        self.label_6.setGeometry(QtCore.QRect(390, 470, 181, 61))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                   "color: rgb(0, 0, 0);\n"
                                   "border:3px solid rgb(0,0,0);")
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.lineEdit_Classify = QtWidgets.QLineEdit(self.page)
        self.lineEdit_Classify.setGeometry(QtCore.QRect(100, 470, 181, 61))
        self.lineEdit_Classify.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                             "border:3px solid rgb(0,0,0);")
        self.lineEdit_Classify.setObjectName("lineEdit_Classify")
        # 初始化时设定 lineEdit 为不可编辑
        self.lineEdit_Classify.setReadOnly(True)
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.page_2.resize(866, 540)
        self.tableWidget_2 = QtWidgets.QTableWidget(self.page_2)
        self.tableWidget_2.setGeometry(QtCore.QRect(20, 10, 421, 431))
        self.tableWidget_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                         "border:3px solid rgb(0,0,0);")
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(0)
        self.tableWidget_2.setRowCount(0)
        self.label_7 = QtWidgets.QLabel(self.page_2)
        self.label_7.setGeometry(QtCore.QRect(460, 30, 181, 31))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_7.setTextFormat(QtCore.Qt.PlainText)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.page_2)
        self.label_8.setGeometry(QtCore.QRect(630, 20, 181, 61))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                   "color: rgb(0, 0, 0);\n"
                                   "border:3px solid rgb(0,0,0);")
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.tableWidget_3 = QtWidgets.QTableWidget(self.page_2)
        self.tableWidget_3.setGeometry(QtCore.QRect(460, 110, 351, 261))
        self.tableWidget_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                         "border:3px solid rgb(0,0,0);")
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.tableWidget_3.setColumnCount(0)
        self.tableWidget_3.setRowCount(0)
        self.label_10 = QtWidgets.QLabel(self.page_2)
        self.label_10.setGeometry(QtCore.QRect(480, 410, 131, 31))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_10.setTextFormat(QtCore.Qt.PlainText)
        self.label_10.setObjectName("label_10")
        self.label_9 = QtWidgets.QLabel(self.page_2)
        self.label_9.setGeometry(QtCore.QRect(630, 390, 181, 61))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                   "color: rgb(0, 0, 0);\n"
                                   "border:3px solid rgb(0,0,0);")
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")
        self.pushButton_submit = QtWidgets.QPushButton(self.page_2)
        self.pushButton_submit.setGeometry(QtCore.QRect(660, 470, 131, 61))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_submit.setFont(font)
        self.pushButton_submit.setStyleSheet("#pushButton_submit{\n"
                                             "    background-color: rgb(220, 220, 220);\n"
                                             "    color: rgb(0, 0, 0);\n"
                                             "    border:3px solid rgb(0,0,0);\n"
                                             "    border-radius:8px;\n"
                                             "}\n"
                                             "#pushButton_submit:hover{\n"
                                             "    background-color: rgb(255, 255, 255);\n"
                                             "    color: rgb(0, 0, 0);\n"
                                             "}\n"
                                             "#pushButton_submit:pressed{\n"
                                             "    padding-top:5px;\n"
                                             "    padding-left:5px;\n"
                                             "}")
        self.pushButton_submit.setObjectName("pushButton_submit")
        # 提交兑换按钮
        self.pushButton_submit.clicked.connect(self.checkout)
        self.label_11 = QtWidgets.QLabel(self.page_2)
        self.label_11.setGeometry(QtCore.QRect(460, 70, 181, 31))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_11.setTextFormat(QtCore.Qt.PlainText)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.page_2)
        self.label_12.setGeometry(QtCore.QRect(20, 470, 181, 31))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("color: rgb(255, 255, 255);")
        self.label_12.setTextFormat(QtCore.Qt.PlainText)
        self.label_12.setObjectName("label_12")
        self.lineEdit = QtWidgets.QLineEdit(self.page_2)
        self.lineEdit.setGeometry(QtCore.QRect(220, 470, 221, 61))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                    "border:3px solid rgb(0,0,0);")
        self.lineEdit.setObjectName("lineEdit")
        # 添加购物车
        self.lineEdit.returnPressed.connect(self.add_to_database)
        self.pushButton_delete = QtWidgets.QPushButton(self.page_2)
        self.pushButton_delete.setGeometry(QtCore.QRect(490, 470, 131, 61))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_delete.setFont(font)
        self.pushButton_delete.setStyleSheet("#pushButton_delete{\n"
                                             "    background-color: rgb(220, 220, 220);\n"
                                             "    color: rgb(0, 0, 0);\n"
                                             "    border:3px solid rgb(0,0,0);\n"
                                             "    border-radius:8px;\n"
                                             "}\n"
                                             "#pushButton_delete:hover{\n"
                                             "    background-color: rgb(255, 255, 255);\n"
                                             "    color: rgb(0, 0, 0);\n"
                                             "}\n"
                                             "#pushButton_delete:pressed{\n"
                                             "    padding-top:5px;\n"
                                             "    padding-left:5px;\n"
                                             "}")
        self.pushButton_delete.setObjectName("pushButton_delete")
        self.stackedWidget.addWidget(self.page_2)
        self.verticalLayout_4.addWidget(self.stackedWidget)
        self.horizontalLayout_4.addWidget(self.frame_6)
        self.verticalLayout.addWidget(self.frame_3)
        self.horizontalLayout.addWidget(self.frame)
        MainWindow_inter.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow_inter)
        self.stackedWidget.setCurrentIndex(0)
        self.pushButton_close.clicked.connect(MainWindow_inter.close)  # type: ignore
        self.pushButton_min.clicked.connect(MainWindow_inter.showMinimized)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow_inter)
        # 删除购物车
        self.pushButton_delete.clicked.connect(self.clear_shopping_cart)
        self.show_table1()

    def retranslateUi(self, MainWindow_inter):
        _translate = QtCore.QCoreApplication.translate
        MainWindow_inter.setWindowTitle(_translate("MainWindow_inter", "MainWindow"))
        self.pushButton_photo.setText(_translate("MainWindow_inter", "上传物品"))
        self.pushButton_exchange.setText(_translate("MainWindow_inter", "商品兑换"))
        self.label_3.setText(_translate("MainWindow_inter", "个人碳积分："))
        self.pushButton_local.setText(_translate("MainWindow_inter", "本地上传"))
        self.pushButton_identify.setText(_translate("MainWindow_inter", "识别物品"))
        self.pushButton_revise.setText(_translate("MainWindow_inter", "修改名称"))
        self.pushButton_confirm.setText(_translate("MainWindow_inter", "确认上传"))
        self.label_4.setText(_translate("MainWindow_inter", "归类物品："))
        self.label_5.setText(_translate("MainWindow_inter", "相应积分："))
        self.label_7.setText(_translate("MainWindow_inter", "个人碳积分："))
        self.label_10.setText(_translate("MainWindow_inter", "商品合计："))
        self.pushButton_submit.setText(_translate("MainWindow_inter", "提交兑换"))
        self.label_11.setText(_translate("MainWindow_inter", "购物车："))
        self.label_12.setText(_translate("MainWindow_inter", "添加商品编号："))
        self.pushButton_delete.setText(_translate("MainWindow_inter", "删除物品"))

    # 显示上传界面
    def show_page(self):
        self.page.show()
        self.page_2.hide()

    # 显示兑换界面
    def show_page_2(self):
        self.page_2.show()
        self.page.hide()

    # 本地上传照片
    def load_image(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_name, _ = QFileDialog.getOpenFileName(self, "选择图片", "",
                                                   "Images (*.png *.xpm *.jpg *.bmp);;All Files (*)", options=options)
        if file_name:
            self.image_path = file_name
            pixmap = QPixmap(file_name)
            self.label.setPixmap(pixmap.scaled(self.label.size()))

    # 识别照片,将标签放到”识别物品“中
    def identify_image(self):
        if self.image_path:
            result = self.classifier.classify_image(self.image_path)
            print(result)
            self.lineEdit_Classify.setText(result)


    # 输出标签对应的积分
        self.scores = {'书包':1000,
                        '塑料瓶':1000,
                        '塑料餐盒':1000,
                        '手机':1000,
                        '易拉罐':1000,
                        '橡皮':1000,
                        '毛巾':1000,
                        '毛绒玩具':1000,
                        '泡沫塑料':1000,
                        '玻璃瓶':1000,
                        '电池':1000,
                        '笔':1000,
                        '笔记本电脑':1000,
                        '纸':1000,
                        '罐头盒':1000,
                        '衣服':1000}
        # 从字典中获取积分，并将其设置到label_6中
        score = self.scores.get(result, 0)  # 如果标签不在字典中，返回0
        self.label_6.setText(str(score))

    def update_score(self, text):
        self.lineEdit_Classify.setReadOnly(False)
        self.lineEdit_Classify.textChanged.connect(self.update_score)
        score = self.scores.get(text, 0)  # 如果标签不在字典中，返回0
        self.label_6.setText(str(score))

        self.lineEdit_Classify.setReadOnly(False)  # 允许编辑
        self.lineEdit_Classify.textChanged.connect(self.update_score)

    #用户点击确认上传
    def confirm(self):
        # 清空label中的图片（假设你的图片在self.image_label中）
        self.label.clear()
        # 清空label_6和lineEdit_Classify中的文本
        added_score = int(self.label_6.text()) if self.label_6.text() else 0
        self.label_6.clear()
        self.lineEdit_Classify.clear()
        # 将label_6中的积分加到label_2中
        current_score = int(self.label_2.text()) if self.label_2.text() else 0
        new_score = current_score + added_score
        # 更新label_2中的积分
        self.label_2.setText(str(new_score))

    # 修改物品名称
    #def revise_result(self):
        #self.lineEdit_Classify.setEditTriggers(QAbstractItemView.AllEditTriggers)

    # 显示商品信息
    def show_table1(self):
        cursor.execute("SELECT id, name, price FROM products")
        rows = cursor.fetchall()  # 获取查询结果

        self.tableWidget_2.setColumnCount(3)
        self.tableWidget_2.setRowCount(len(rows))
        self.tableWidget_2.setHorizontalHeaderLabels(['商品编号', '名称', '积分'])
        self.tableWidget_2.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget_2.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        for i, row in enumerate(rows):
            self.tableWidget_2.setItem(i, 0, QtWidgets.QTableWidgetItem(str(row[0])))  # 显示编号
            self.tableWidget_2.setItem(i, 1, QtWidgets.QTableWidgetItem(row[1]))
            self.tableWidget_2.setItem(i, 2, QtWidgets.QTableWidgetItem(str(row[2])))

    # 显示购物车
    def show_table2(self, data_list):
        self.tableWidget_3.clearContents()
        self.tableWidget_3.setRowCount(len(data_list))
        self.tableWidget_3.setColumnCount(3)
        self.tableWidget_3.setHorizontalHeaderLabels(['商品编号', '名称', '积分'])
        self.tableWidget_3.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget_3.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)

        total_price = 0
        for i, item in enumerate(data_list):
            # products.id, products.name, shopping_cart.quantity, products.price, shopping_cart.price
            pro_id = item[0]
            name = item[1]
            price = item[3]
            quantity = item[2]
            self.tableWidget_3.setItem(i, 0, QtWidgets.QTableWidgetItem(str(pro_id)))
            self.tableWidget_3.setItem(i, 1, QtWidgets.QTableWidgetItem(str(name)))
            self.tableWidget_3.setItem(i, 2, QtWidgets.QTableWidgetItem(str(price)))
            total_price += price * quantity

        self.label_9.setText(str(total_price))

    @property
    # 全局刷新购物车
    def load_cart(self):
        cursor.execute(
            "SELECT products.id, products.name, shopping_cart.quantity, products.price, shopping_cart.price FROM shopping_cart INNER JOIN products ON shopping_cart.product_id = products.id WHERE shopping_cart.user_id = ?",
            (self.user_id,))
        result = cursor.fetchall()
        self.show_table2(data_list=result)

    # 添加购物车
    def add_to_database(self):
        text = self.lineEdit.text()
        print(text, 90909)
        self.lineEdit.setText("")

        # 判断编号是否存在
        cursor.execute("SELECT id, name, price FROM products WHERE id = ? ", (text,))
        product = cursor.fetchone()
        if not product:
            QtWidgets.QMessageBox.warning(self.centralwidget, "Error", "商品编号不存在")
            return

        added_amount, added_price = product[1], product[2]
        print(added_amount, added_price)

        # TODO: 添加到购物车
        user_id = self.user_id
        product_id = product[0]
        quantity = 1
        price = added_price

        # 将数据插入到购物车表中
        cursor.execute("""
                INSERT INTO shopping_cart (user_id, product_id, quantity, price)
                VALUES (?, ?, ?, ?)
            """, (user_id, product_id, quantity, price))

        # 提交更改
        conn.commit()
        cursor.execute(
            "SELECT products.id, products.name, shopping_cart.quantity, products.price, shopping_cart.price FROM shopping_cart INNER JOIN products ON shopping_cart.product_id = products.id WHERE shopping_cart.user_id = ?",
            (self.user_id,))
        result = cursor.fetchall()

        # 更新购物车显示
        self.show_table2(data_list=result)

    # 清空购物车商品信息
    def clear_shopping_cart(self):
        self.label_9.setText("")
        self.lineEdit.setText("")
        self.tableWidget_3.clear()

        cursor.execute("DELETE FROM shopping_cart WHERE user_id = ?", (self.user_id,))
        conn.commit()
        # 弹窗提示购物车已清空
        QtWidgets.QMessageBox.information(self.centralwidget, "提示", "购物车已清空！")

    # 计算总价并更新用户余额
    def checkout(self):
        total_price = self.label_9.text()
        if total_price is None:
            total_price = 0

        # 更新用户余额
        cursor.execute("SELECT balance FROM users WHERE id = ?", (self.user_id,))
        balance = cursor.fetchone()[0]
        if balance < float(total_price):
            QtWidgets.QMessageBox.information(self.centralwidget, "提示", "余额不足！")
            print("余额不足！")
            return
        new_balance = balance - float(total_price)
        cursor.execute("UPDATE users SET balance = ? WHERE id = ?", (new_balance, self.user_id))
        conn.commit()
        print("余额更新成功！")

        # 将购物车中的商品移动到订单表中，并减少商品数量
        cursor.execute("SELECT * FROM shopping_cart WHERE user_id = ?", (self.user_id,))
        items = cursor.fetchall()
        for item in items:
            # 获取商品数量
            cursor.execute("SELECT quantity FROM products WHERE id = ?", (item[2],))
            quantity = cursor.fetchone()[0]
            # 判断库存是否充足
            if quantity < item[3]:
                QtWidgets.QMessageBox.information(self.centralwidget, "提示", "商品库存不足！")
                print("商品库存不足！")
                return
            # 更新商品数量
            new_quantity = quantity - item[3]
            cursor.execute("UPDATE products SET quantity = ? WHERE id = ?", (new_quantity, item[2]))
            conn.commit()
            # 插入订单记录
            cursor.execute("INSERT INTO orders (user_id, product_id, price) VALUES (?, ?, ?)",
                           (item[1], item[2], item[4]))
            conn.commit()

        # 清空购物车
        cursor.execute("DELETE FROM shopping_cart WHERE user_id = ?", (self.user_id,))
        conn.commit()
        QtWidgets.QMessageBox.information(self.centralwidget, "提示", "结算成功！")
        print("结算成功！")
        cursor.execute("SELECT balance FROM users WHERE id = ?", (self.user_id,))
        balance = cursor.fetchone()[0]
        self.label_8.setText(str(balance))
        self.load_cart

    # 确认上传
    #def enter_upload(self, name, price, p_id):
        #cursor.execute("UPDATE products SET name = ? WHERE  id = ?", (name, p_id))
        #conn.commit()
        # 确定上传,更新用户碳积分
        #cursor.execute("SELECT id, balance FROM users WHERE id = ? ", (self.user_id))
        #cursor.execute("SELECT id, price FROM products WHERE id = ? ", (p_id))
        #user = cursor.fetchone()
        #current_balance = user[1]
        #product = cursor.fetchone()
        #added_amount = product[1]
        # 计算新的余额
        #new_balance = current_balance + added_amount
        # 在数据库中保存该物品
        #cursor.execute("UPDATE users SET balance = ? WHERE  id = ?", (new_balance, self.user_id))
        #conn.commit()
        #return True

    # 获得积分
    def get_points(self, item_name):
        query = "SELECT price FROM products WHERE name = ?"
        cursor.execute(query, (item_name,))
        result = cursor.fetchone()

        if result is None:
            return None  # 如果没有找到物品，返回None
        else:
            return result[0]  # 返回物品的价格

    # 获取物品名称和积分
    def confirm_upload(self):
        if self.identified_item is None:
            # 如果identified_item还没有被设置，显示一个错误消息并退出方法
            QtWidgets.QMessageBox.warning(self.centralwidget, "警告", "请先识别图片！")
            return

        item_name = self.identified_item  # 从类的属性中获取识别的物品名称

        # 尝试将用户输入的积分从字符串转换为整数，如果输入的不是有效的整数，捕获错误并显示错误消息
        try:
            item_price = int(self.lineEdit_item_points.text())
        except ValueError:
            QtWidgets.QMessageBox.warning(self.centralwidget, "警告", "请输入有效的积分！")
            return

        cursor.execute("SELECT id, balance FROM users WHERE id = ? ", (self.user_id))
        user = cursor.fetchone()
        current_balance = user[1]

        db_price = self.get_points(item_name)  # 获取积分

        if db_price is None:
            # 物品名称不存在于数据库中，弹窗提示
            QtWidgets.QMessageBox.warning(self.centralwidget, "警告", "该物品不存在，请重新输入！")
        elif db_price != item_price:
            # 物品积分与数据库中不匹配，弹窗提示
            QtWidgets.QMessageBox.warning(self.centralwidget, "警告", "该物品积分不正确，请重新输入！")
        else:
            # 物品积分匹配，更新个人碳积分
            new_balance = current_balance + item_price
            # 在数据库中更新个人碳积分
            cursor.execute("UPDATE users SET balance = ? WHERE  id = ?", (new_balance, self.user_id))
            conn.commit()
            self.label_carbon_points.setText(str(new_balance))

            # 清空输入框
            self.lineEdit_item_name.setText("")
            self.lineEdit_item_points.setText("")
            QtWidgets.QMessageBox.information(self.centralwidget, "提示", "上传成功！")

    # 切换 lineEdit_Classify 的可编辑状态
    def on_pushButton_revise_clicked(self):
        self.lineEdit_Classify.setReadOnly(not self.lineEdit_Classify.isReadOnly())
